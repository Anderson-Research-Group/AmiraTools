# Amira-Script-Object 620
# L. Schuring 1/2025
# TO-DO: figure out testBreak. Need to delete hidden modules if user interrupts the script

#########################################################################
# CONSTRUCTOR: This is a special Amira method that sets up the script module in Amira
#########################################################################
$this proc constructor {} {
	$this data setLabel "Original"
	set dataTif [$this data] 
	set dataDicom [$this newPortConnection Seg3D-export {HxUniformScalarField3 HxStackedScalarField3}] 
	$this newPortDoIt "ApplyButton"	
	$this ApplyButton setVisibility 0
  }
  

#########################################################################
# DESTRUCTOR: This is a special Amira method that is supposedly helpful for clean up. Place-holder for now. Not sure how to use it yet.
#########################################################################
$this proc destructor { } {
	echo "Removing Script Object"
}

#########################################################################
# applyAutoAnkleLabels: This procedure does the leg work of generating labels from your Seg3d/Corview file
#########################################################################
proc applyAutoAnkleLabels {dataDicom dataTif} { 
	# Auto Ankle Label Generation. Tested on Amira 6.0.1
	# Purpose: convert Seg3D/Corview growcut export (specific to the Ankle Project) into Amira Labels 
	# Assumptions: assumes Seg3D export is a tif, and Tibia = 1, Calcaneus = 2, Talus = 3
	# Author: L. Schuring, 3/2025
		
	# set dataTif "Subj01.tiff"	
	# set dataDicom "Subj01"

	# replace Tif bbox info with Dicom bbox info
	set bboxDicom [$dataDicom getBoundingBox]
	$dataTif setBoundingBox {*}$bboxDicom 
		#For troubleshooting: 
		#set bboxTif [$dataTif getBoundingBox]

	# Create a multi-thresholding tool to auto segment Tif stack 
	set labelGen [create HxLabelVoxel]
	$labelGen data connect $dataTif
	$labelGen regions setValue "Exterior Tibia Calcaneus Talus"
	$labelGen fire
	$labelGen boundary01 setValue 0
	$labelGen boundary12 setValue 1
	$labelGen boundary23 setValue 2
	$labelGen applyTransformToResult 1
	set labelTib [[$labelGen create] setLabel "$dataDicom-Tibia"]
	set labelCal [[$labelTib duplicate] setLabel "$dataDicom-Calcaneus"]
	set labelTal [[$labelTib duplicate] setLabel "$dataDicom-Talus"]

	# remove materials from each label so only the material of interest is in the label
	$labelTib removeMaterial "Calcaneus"
	$labelTib removeMaterial "Talus"
	$labelCal removeMaterial "Tibia"
	$labelCal removeMaterial "Talus"
	$labelTal removeMaterial "Calcaneus"
	$labelTal removeMaterial "Tibia"

	# show final label files
	$labelTib showIcon
	$labelCal showIcon
	$labelTal showIcon
}

#########################################################################
# CLEANUP: This procedure removes any intermediate modules that were generated by the script
#########################################################################

proc cleanUp {beforeMods} {
	echo $beforeMods
	set afterMods [all -hidden]
	echo $afterMods

	# Initialize an empty list for removal of intermediate modules
	set delMods ""

	# Iterate over each element in afterMods, and compare to beforeMods to determine if it needs to be deleted
	foreach item $afterMods {
	    # Check if the item is not in startList
	    if {[lsearch -exact $beforeMods $item] == -1} {
	        # Append the item to delMod
	        lappend delMods $item
	    }
	}
	
	# remove intermediate mods
	foreach item $delMods {
		remove $item
	}
}


#########################################################################
# COMPUTE: This is a special Amira procedure. It is what waits for user input from the AL_AutoAnkleLabels module. 
# Once both datasets (dicom and tif) are selected, "Apply" button will appear
# If Apply button is hit, "AL_AutoAnkleLabels.hx" will run 
#########################################################################
$this proc compute {} {
	if {[$this data getState] != "disconnect" & [$this Seg3D-export getState] != "disconnect"} {
		# if both original and Seg3D-export data is available, make apply buttom visible
		$this ApplyButton setVisibility 1
	}
	
	if {[$this ApplyButton wasHit 0] } {
		# set variables to be used by applyAutoAnkleLabels
		set dataDicom [$this data source]
		set dataTif [$this Seg3D-export source]

		# identify current hidden modules in Amira so that intermediate modules can be deleted after running script
		set beforeMods [all -hidden]
		global hideNewModules
		set hideNewModules 1
		
		# calling on applyAutoAnkleLabels and feeding it the dicom and tif data
		applyAutoAnkleLabels $dataDicom $dataTif

		# After script runs, run clean-up procedure to remove hidden intermediate modules
		set hideNewModules 0
		cleanUp $beforeMods
	}
}




